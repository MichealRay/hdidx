{"name":"Hdidx","tagline":"The main repository has been moved to https://github.com/hdidx/hdidx.","body":"# **HDIdx**: Indexing High-Dimensional Data\r\n\r\n[![pypi](https://img.shields.io/pypi/v/hdidx.svg?style=flat-square)](https://pypi.python.org/pypi/hdidx/)\r\n[![downloads_month](https://img.shields.io/pypi/dm/hdidx.svg?style=flat-square)](https://pypi.python.org/pypi/hdidx/)\r\n[![license](https://img.shields.io/pypi/l/hdidx.svg?style=flat-square)](https://raw.githubusercontent.com/wanji/hdidx/master/LICENSE.md)\r\n\r\n## What is **HDIdx**?\r\n\r\n**HDIdx** is a python package for approximate nearest neighbor (ANN) search. Nearest neighbor (NN) search is very challenging in high-dimensional space because of the [*Curse of Dimensionality*](https://en.wikipedia.org/wiki/Curse_of_dimensionality) problem. The basic idea of **HDIdx** is to compress the original feature vectors into compact binary codes, and perform approximate NN search instead of extract NN search. This can largely reduce the storage requirements and can significantly speed up the search.\r\n\r\n## Architecture\r\n\r\n![Framework](https://raw.githubusercontent.com/wanji/hdidx/master/doc/framework.png)\r\n\r\n**HDIdx** has three main modules: 1) `Encoder` which can compress the original feature vectors into compact binary hash codes, 2) `Indexer` which can index the database items and search approximate nearest neighbor for a given query item, and 3) `Storage` module which encapsulates the underlying data storage, which can be memory or NoSQL database like LMDB, for the `Indexer`.\r\n\r\nThe current version implements following feature compressing algorithms: \r\n\r\n- `Product Quantization`[1].\r\n- `Spectral Hashing`[2].\r\n\r\nTo use HDIdx, first you should learn a `Encoder` from some learning vectors.\r\nThen you can map the base vectors into hash codes using the learned `Encoder` and building indexes over these hash codes by an `Indexer`, which will write the indexes to the specified storage medium.\r\nWhen a query vector comes, it will be mapped to hash codes by the same `Encoder` and the `Indexer` will find the similar items to this query vector.\r\n\r\n\r\n## Installation\r\n\r\n**HDIdx** can be installed by `pip`:\r\n\r\n```bash\r\n[sudo] pip install hdidx\r\n```\r\n\r\nBy default, **HDIdx** use kmeans algorithm provided by [*SciPy*](http://www.scipy.org/). To be more efficient, you can install python extensions of [*OpenCV*](http://opencv.org/), which can be installed via `apt-get` on Ubuntu. For other Linux distributions, e.g. CentOS, you need to compile it from source.\r\n\r\n```bash\r\n[sudo] apt-get install python-opencv\r\n```\r\n\r\n**HDIdx** will use [*OpenCV*](http://opencv.org/) automatically if it is available.\r\n\r\n### Windows Guide\r\n\r\nGeneral dependencies:\r\n\r\n- [Anaconda](https://store.continuum.io/cshop/anaconda/)\r\n- [Microsoft Visual C++ Compiler for Python](http://www.microsoft.com/en-us/download/details.aspx?id=44266)\r\n\r\nAfter install the above mentioned software, download [`stdint.h`](http://msinttypes.googlecode.com/svn/trunk/stdint.h) and put it under the `include` folder of Visual C++, e.g. `C:\\Users\\xxx\\AppData\\Local\\Programs\\Common\\Microsoft\\Visual C++ for Python\\9.0\\VC\\include`. Then hdidx can be installed by `pip` from the *Anaconda Command Prompt*.\r\n\r\n## Example\r\n\r\nHere is a simple example. See this [notebook](http://nbviewer.ipython.org/gist/wanji/c08693f06ef744feef50) for more examples.\r\n\r\n```python\r\n# import necessary packages\r\n\r\nimport hdidx\r\nimport numpy as np\r\n\r\n# generating sample data\r\nndim = 16      # dimension of features\r\nndb = 10000    # number of dababase items\r\nnqry = 10      # number of queries\r\n\r\nX_db = np.random.random((ndb, ndim))\r\nX_qry = np.random.random((nqry, ndim))\r\n\r\n# create Product Quantization Indexer\r\nidx = hdidx.indexer.IVFPQIndexer()\r\n# build indexer\r\nidx.build({'vals': X_db, 'nsubq': 8})\r\n# add database items to the indexer\r\nidx.add(X_db)\r\n# searching in the database, and return top-10 items for each query\r\nids, dis = idx.search(X_qry, 10)\r\nprint ids\r\nprint dis\r\n```\r\n\r\n## Citation\r\n\r\nPlease cite the following paper if you use this library:\r\n\r\n```\r\n@article{wan2015hdidx,\r\n  title={HDIdx: High-Dimensional Indexing for Efficient Approximate Nearest Neighbor Search},\r\n  author={Wan, Ji and Tang, Sheng and Zhang, Yongdong and Li, Jintao and Wu, Pengcheng and Hoi, Steven CH},\r\n  journal={arXiv preprint arXiv:1510.01991},\r\n  year={2015}\r\n}\r\n```\r\n\r\n## Reference\r\n```\r\n[1] Jegou, Herve, Matthijs Douze, and Cordelia Schmid.\r\n    \"Product quantization for nearest neighbor search.\"\r\n    Pattern Analysis and Machine Intelligence, IEEE Transactions on 33.1 (2011): 117-128.\r\n[2] Weiss, Yair, Antonio Torralba, and Rob Fergus.\r\n    \"Spectral hashing.\"\r\n    In Advances in neural information processing systems, pp. 1753-1760. 2009.\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}